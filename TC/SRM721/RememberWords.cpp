#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;


class RememberWords {
public:
	string isPossible(ll d1, ll d2, ll w1, ll w2) {
		ll x = ((2ll * w1) - d1 * d1 + d1) / (2 * d1);
		x = max(x, 0LL);
		ll sx = (x + x + d1 - 1) * d1 / 2;
		if (sx < w1) {
			x++;
			sx = (x + x + d1 - 1) * d1 / 2;
		}
		ll dx = w1 - x * d1;
		ll xx = x + (sqrt(1 + 8 * dx) - 1) / 2;
		cout << x << " " << xx << endl;
		ll y = ((2ll * w2) - d2 * d2 + d2) / (2 * d2);
		y = max(y, 0LL);
		ll sy = (y + y + d2 - 1) * d2 / 2;
		if (sy < w2) {
			y++;
			sy = (y + y + d2 - 1) * d2 / 2;
		}
		ll dy = w2 - y * d2;
		ll yy = y + (sqrt(1 + 8 * dy) - 1) / 2;
		cout << y << " " << yy << endl;
		if (x <= yy + 1 && xx >= y - 1) {
			return "Possible";
		}
		return "Impossible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	RememberWords *obj;
	string answer;
	obj = new RememberWords();
	clock_t startTime = clock();
	answer = obj->isPossible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 3;
	p2 = 7;
	p3 = 18;
	p4 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 3;
	p3 = 5;
	p4 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 5;
	p2 = 300;
	p3 = 500;
	p4 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100;
	p1 = 1;
	p2 = 0;
	p3 = 2;
	p4 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000000;
	p1 = 1000000000;
	p2 = 1000000000;
	p3 = 1000000000;
	p4 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
