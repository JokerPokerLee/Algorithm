#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Literature {
public:
	double expectation(int n, vector <int> own, vector <int> history) {
		vector<vector<vector<double>>> f(n + 1);
		for (int i = 0; i <= n; i++) {
			f[i] = vector<vector<double>>(n + 1);
			for (int j = 0; j <= n; j++) {
				f[i][j] = vector<double>(3);
			}
		}
		set<int> Teja(own.begin(), own.end()), Vinay, Sohail;
		for (int i = 0; i < history.size(); i++) {
			if (i % 3 == 1 && !Teja.count(history[i])) {
				Sohail.insert(history[i]);
			}
			if (i % 3 == 2 && !Teja.count(history[i])) {
				Vinay.insert(history[i]);
			}
			if (Vinay.size() == n || Sohail.size() == n) {
				return i + 1;
			}
		}
		for (int i = 0; i <= n; i++) {
			f[0][i][0] = f[0][i][1] = f[0][i][2] = 0.0;
			f[i][0][0] = f[i][0][1] = f[i][0][2] = 0.0;
		}
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				double a1 = 2.0 * n, b1 = -2.0 * n + j, c1 = -2.0 * n - j * f[i][j - 1][2];
				double a2 = -2.0 * n + i, b2 = 2.0 * n, c2 = -4.0 * n + i - i * f[i - 1][j][0];
				double div = a1 * b2 - a2 * b1;
				if (fabs(div) < 1e-7) {
					cout << "divided by zero" << endl;
					return -1;
				}
				f[i][j][1] = (b1 * c2 - b2 * c1) / div;
				f[i][j][2] = (a2 * c1 - a1 * c2) / div;
				f[i][j][0] = f[i][j][1] + 1;
			}
		}
		return f[n - Vinay.size()][n - Sohail.size()][history.size() % 3] + history.size();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	Literature *obj;
	double answer;
	obj = new Literature();
	clock_t startTime = clock();
	answer = obj->expectation(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	int t1[] = {3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3.333333333333333;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {1,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,1,6,6,2,5,2,4,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	int t1[] = {5,29,12,16,25,17,18,30,27,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,6,5,23,22,29,20,8,12,3,13,16,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 133.0880654696573;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
